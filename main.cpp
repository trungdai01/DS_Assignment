#include "bellman.h"
#include "tsm.h"

int main()
{
    // int G[20][20] = {{0, 8, 24, 63, 22, 51, 20, 20, 24, 19, 24, 78, 37, 57, 48, 57},
    //                  {62, 0, 74, 100, 77, 46, 97, 79, 27, 23, 57, 33, 79, 94, 97, 85},
    //                  {83, 4, 0, 75, 45, 93, 25, 31, 80, 15, 16, 70, 94, 20, 26, 7},
    //                  {77, 88, 81, 0, 43, 30, 94, 39, 75, 20, 28, 98, 19, 6, 92, 82},
    //                  {58, 74, 52, 32, 0, 85, 45, 24, 15, 24, 5, 99, 60, 99, 18, 86},
    //                  {73, 95, 39, 19, 37, 0, 69, 12, 42, 44, 100, 70, 41, 18, 77, 99},
    //                  {0, 0, 38, 52, 99, 22, 0, 63, 22, 4, 87, 28, 2, 12, 93, 20},
    //                  {98, 65, 81, 36, 51, 85, 72, 0, 63, 26, 82, 62, 97, 22, 47, 39},
    //                  {88, 47, 5, 25, 65, 3, 14, 28, 0, 93, 85, 81, 20, 53, 94, 79},
    //                  {39, 57, 10, 19, 94, 61, 70, 31, 90, 0, 97, 12, 52, 59, 0, 99},
    //                  {64, 54, 11, 69, 80, 76, 38, 60, 70, 30, 0, 10, 17, 16, 63, 10},
    //                  {96, 68, 67, 72, 87, 26, 32, 23, 23, 21, 19, 0, 35, 39, 44, 2},
    //                  {3, 7, 56, 14, 42, 1, 57, 80, 27, 93, 10, 37, 0, 9, 26, 66},
    //                  {86, 88, 33, 53, 59, 87, 45, 57, 9, 69, 45, 95, 70, 0, 84, 38},
    //                  {72, 88, 11, 95, 68, 53, 96, 91, 32, 23, 84, 8, 26, 93, 0, 1},
    //                  {93, 79, 89, 25, 98, 14, 11, 8, 71, 87, 43, 15, 81, 80, 66, 0}};
    int G[20][20] = {{0, 8, 0, 1, 3}, {8, 0, 3, 0, 0}, {0, 3, 0, 0, 4}, {1, 3, 0, 0, 7}, {3, 0, 4, 7, 0}};
    // int G[20][20] = {{0, 2, 2, 2}, {2, 0, 0, 2}, {0, 0, 0, 0}, {0, 0, 0, 0}};
    // int G[20][20] = {{0, 0, 0, 0, 50, 77, 49, 83, 24, 0, 0, 0},     {66, 0, 0, 55, 58, 23, 79, 64, 0, 91, 0, 0},
    //                  {26, 0, 0, 95, 0, 0, 67, 81, 0, 0, 9, 94},     {0, 0, 0, 0, 22, 33, 77, 6, 76, 0, 5, 0},
    //                  {46, 56, 0, 0, 0, 71, 55, 75, 24, 98, 77, 45}, {77, 0, 48, 0, 0, 0, 0, 0, 33, 0, 0, 0},
    //                  {4, 97, 74, 8, 21, 0, 0, 19, 70, 0, 0, 49},    {89, 0, 19, 0, 51, 29, 0, 0, 20, 89, 41, 0},
    //                  {81, 38, 0, 0, 9, 65, 0, 50, 0, 28, 0, 0},     {27, 94, 9, 76, 0, 12, 0, 0, 0, 0, 47, 0},
    //                  {42, 0, 78, 28, 0, 59, 0, 3, 0, 100, 0, 0},    {17, 0, 74, 38, 60, 0, 17, 19, 0, 66, 0, 0}};
    int BFValue[20];
    int BFPrev[20];

    int numOfVertices = 5;
    // int numOfVertices = 4;
    for (int i = 0; i < 20; i++)
    {
        BFPrev[i] = -1;
        BFValue[i] = -1;
    }
    char start_vertex = 'A';
    char end_vertex = 'C';
    for (int i = 0; i < numOfVertices; i++)
    {
        printf("step %d:\n", i + 1);
        BF(G, numOfVertices, start_vertex, BFValue, BFPrev);
        for (int j = 0; j < numOfVertices; j++)
        {
            cout << BFValue[j] << " ";
        }
        cout << endl;
        for (int j = 0; j < numOfVertices; j++)
        {
            cout << BFPrev[j] << " ";
        }
        cout << endl;
    }
    cout << BF_Path(G, numOfVertices, start_vertex, end_vertex) << endl;
    string output = Traveling(G, numOfVertices, start_vertex);
    cout << "Output: " << output.c_str() << endl;
    int cost = 200;
    float partile = 0.1;
    if ((204 - 204 * partile) <= cost && cost <= (204 + 204 * partile))
    {
        cout << "your output is at least 90% correct";
    }
    return 0;
}